#!/usr/bin/env python

from numpy import pi, sin, cos, mgrid
from gcodeAllParser import *
from supportParser import *
import sys, time, os
from mayavi import mlab
import numpy as np

object_x = []
object_y = []
object_z = []
moves_x = []
moves_y = []
moves_z = []
support_x = []
support_y = []
support_z = []

bedsize = [210, 210]

supportcolor = (0.7529, 0.7529, 0.7529)
extrudecolor = (0, 0.4980, 0.9960)
bedcolor = (0.7, 0.7, 0.7)
linecolor1 = (0.4509, 0.4509, 0.4509)
linecolor2 = (0.5490, 0.5490, 0.5490)
black = (0,0,0)
white = (1,1,1)

'''
scene.render_window.point_smoothing = True
scene.render_window.line_smoothing = True
scene.render_window.polygon_smoothing = True
scene.render_window.multi_samples = 8
'''

def loadModel(path):
	#print "loading file %s ..."%repr(path)
	parser = GcodeParser()
	model = parser.parseFile(path)

	for layer in model['object'].layers:
		for seg in layer.segments:
			#if seg.extrude > 0 and seg.distance > 0:
				#if seg.extrude/seg.distance > 1:
			if seg.style == "extrude":
				#if(seg.extrudate > 0.5):
				#print(seg.extrude/seg.distance)
				object_x.append(seg.coords["X"])
				object_y.append(seg.coords["Y"])
				object_z.append(seg.coords["Z"])
			else:
				moves_x.append(seg.coords["X"])
				moves_y.append(seg.coords["Y"])
				moves_z.append(seg.coords["Z"])
	for layer in model['support'].layers:
		for seg in layer.segments:
			support_x.append(seg.coords["X"])
			support_y.append(seg.coords["Y"])
			support_z.append(seg.coords["Z"])
			

if len(sys.argv) > 1:
	path = sys.argv[1]
else:
	# get the real path to the script
	script_path = os.path.realpath(__file__)
	# get the containing folder
	script_dir = os.path.dirname(script_path)
	# default to hana
	path = os.path.join(script_dir, "a.gcode")


def createScene():
	fig1 = mlab.figure(bgcolor=white,size=(800,600))
	fig1.scene.parallel_projection = False
	fig1.scene.render_window.point_smoothing = False
	fig1.scene.render_window.line_smoothing = False
	fig1.scene.render_window.polygon_smoothing = False
	fig1.scene.show_axes = False

def createBed():
	x1, y1, z1 = (0, 210, 0.1)  # | => pt1
	x2, y2, z2 = (210, 210, 0.1)  # | => pt2
	x3, y3, z3 = (0, 0, 0.1)  # | => pt3
	x4, y4, z4 = (210, 0, 0.1)  # | => pt4
	x5, y5, z5 = (0, 210, 0)  # | => pt5
	x6, y6, z6 = (210, 210, 0)  # | => pt6
	x7, y7, z7 = (0, 0, 0)  # | => pt7
	x8, y8, z8 = (210, 0, 0)  # | => pt8

	#bed
	box_points = np.array([[x1, y1, z1], [x2, y2, z2], [x3, y3, z3], [x4, y4, z4], [x5, y5, z5], [x6, y6, z6], [x7, y7, z7], [x8, y8, z8]])
	mlab.mesh([[x1, x2], [x3, x4]], [[y1, y2], [y3, y4]], [[z1, z2], [z3, z4]], color=bedcolor)
	mlab.mesh([[x5, x6], [x7, x8]], [[y5, y6], [y7, y8]], [[z5, z6], [z7, z8]], color=bedcolor)
	mlab.mesh([[x1, x3], [x5, x7]], [[y1, y3], [y5, y7]], [[z1, z3], [z5, z7]], color=bedcolor)
	mlab.mesh([[x1, x2], [x5, x6]], [[y1, y2], [y5, y6]], [[z1, z2], [z5, z6]], color=bedcolor)
	mlab.mesh([[x2, x4], [x6, x8]], [[y2, y4], [y6, y8]], [[z2, z4], [z6, z8]], color=bedcolor)
	mlab.mesh([[x3, x4], [x7, x8]], [[y3, y4], [y7, y8]], [[z3, z4], [z7, z8]], color=bedcolor)

def createLines():
	for x in range(1, 10):
		#lines x
		mlab.plot3d([ (bedsize[0]/10)*x,(bedsize[0]/10)*x ], [0,bedsize[0]], [1,1], color=linecolor1, line_width=0.01)
		#lines y
		mlab.plot3d([0,bedsize[1]], [(bedsize[1]/10)*x,(bedsize[1]/10)*x], [1,1], color=linecolor1, line_width=0.01)
	#for x in range(1, 49):
		#lines x
	#	mlab.plot3d([ (bedsize[0]/50)*x,(bedsize[0]/50)*x ], [0,bedsize[0]], [1,1], color=linecolor2, line_width=0.01)
		#lines y
	#	mlab.plot3d([0,bedsize[1]], [(bedsize[1]/50)*x,(bedsize[1]/50)*x], [1,1], color=linecolor2, line_width=0.01)

def plotModel():
	mlab.plot3d(object_x, object_y, object_z, color=extrudecolor, line_width=0.9, representation='wireframe')
	mlab.plot3d(moves_x, moves_y, moves_z, color=(1,0,0), line_width=0.9, representation='wireframe')

def plotSupport():
	mlab.plot3d(support_x, support_y, support_z, color=supportcolor, tube_radius=0.5)


createScene()
createBed()
#createLines()

loadModel(path)
#loadSupport(path)
plotModel()
plotSupport()


#mlab.view(azimuth=45, elevation=70, focalpoint=[0, 0, 0], distance=62.0, figure=fig)
#																	tube_radius=0.2, tube_sides=4


#mlab.roll(-90)
#mlab.view(45, 45)

mlab.view(320, 70)
mlab.view(distance=20)
mlab.view(focalpoint=(90,100,40))

mlab.show()
'''
filename = sys.argv[1].replace("gcode", "png")
img_path = "./img/"+filename
mlab.savefig(img_path, magnification=3)
mlab.close()
quit()
'''



#visual.set_viewer(fig)

'''
axColor = (0.45,0.45,0.45)
centerAxis = mlab.points3d(0.0, 0.0, 0.0, 4, mode='axes',color=axColor,
                      line_width=1.0, scale_factor=1.,opacity=1.0)
centerAxis.actor.property.lighting = False

axes = mlab.axes(centerAxis, color = axColor, nb_labels=9)
axes.property.display_location = 'background'
axes.title_text_property.opacity = 0
axes.label_text_property.bold = 0
axax = axes.axes
axax.label_format = '%-#6.2g'
axax.fly_mode = 'none'
axax.font_factor = 1.0

def f(x, y):
        sin, cos = np.sin, np.cos
        return sin(0.1 + 0.1) + sin(0.1 + 0.1) + cos(0.1 * x + 0.1 * y)
x, y = np.mgrid[0:200:0.1, 0.:200:0.05]
mlab.surf(x, y, f)
'''







'''
import numpy as np
from mayavi import mlab
from matplotlib import pyplot as plt
from matplotlib.widgets import Slider


def slider_changed(val):
    s.mlab_source.scalars = np.asarray(x * (val + 1), 'd')

# mayavi 3d plot
x, y = np.mgrid[0:3:1,0:3:1]
s = mlab.surf(x, y, np.asarray(x*0.1, 'd'))

# a matplotlib slider
plt.figure()
ax = plt.subplot(1, 1, 1)
slider = Slider(ax, valmin=0., valmax=1., label='test')
slider.on_changed(slider_changed)

plt.show()
mlab.show()
'''